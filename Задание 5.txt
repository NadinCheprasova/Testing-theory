    • Что такое тест план (Test plan)?
Тест план (Test plan) - это документ, описывающий весь объем работ по тестированию, начиная с описания объекта, стратегии, расписания, критериев начала и окончания тестирования, до необходимого в процессе работы оборудования, специальных знаний, а также оценки рисков с вариантами их разрешения.
Тест-план описывает какие работы, как и когда должны быть проведены в рамках тестирования продукта, а также что необходимо для их выполнения. 
    • Что должен описывать тест план?
    • объект тестирования – полное описание того, что будет протестировано;
    • стратегия тестирования – общий план, который описывает подход к проведению тестирования цикла разработки ПО. Это стратегия включает в себя методы тестирования новых функций, общее время и ресурсы, необходимые для реализации проекта;
    • тест процедуры – подробные инструкции, объясняющие как настроить, выполнить и оценить результаты для данного теста;  
    • критерии для начала и окончания тестирования;
    • необходимые ресурсы для тестирования – показывает сколько тестировщиков будет задействовано, какая тестовая среда будет использоваться, перечислено необходимое оборудование;
    • предварительные условия включают в себя состояние системы и ее окружение, настройку и конфигурацию, необходимые для успешного выполнения тестирования;
    •  оценка рисков с предлагаемыми способами их решения.   
    • Какие вы знаете виды тест планов?
    • Мастер тест план (Master Plan or Master Test Plan) 
    • Тест план (Test plan), назовем его детальный тест план) 
    • План приемочных испытаний (Product Acceptance Plan) - документ, описывающий набор действий, связанных с приемочным тестированием (стратегия, дата проведения, ответственные работники и т.д.)
    • Что такое чек лист?
Чек-лист (Check-list) – это список проверок, с кратким описанием того, что нужно проверить. Чек-листы могут быть разного уровня детализации, в зависимости от сложности продукта и требований к отчетности. Чек-листы могут использоваться для определения общего направления и создания более детальных тест-кейсов. 
    • Перечислите возможные атрибуты чек-листа?
Чек-лист- список проверок, в котором мы указываем, что мы будем тестировать, результат и статус проверок.
Он включает в себя следующие атрибуты:
    • Идентификатор (ID);
    • Заголовок; 
    • Описание проверки: содержит краткое описание того, что должно быть проверено 
    • название тестируемого продукта/проекта;
    • Окружение: содержит необходимую информацию о сборке, устройствах, платформах и т.д., на которых должна проводиться проверка;
    • Результат.
Чек-лист также может содержать и другие атрибуты.
    • Перечислите варианты статусов при прохождении чек листа?
Passed” (пройдено), “Failed” (не пройдено), “Blocked” (заблокировано), “Skipped” (пропущено), 
“Not run” (не проводился).
    • Что такое тест кейс?
Тест кейс (test case) - это документ, с описанными четкими действиями, которые нужно выполнить, чтобы проверить какую-либо функцию продукта. Эти действия направлены на проверку того, что функция работает должным образом и соответствует стандартам и требованиям.
    • Перечислите атрибуты тест кейса.
    • Уникальный идентификатор тест-кейса (ID) — необходим для удобной организации хранения и навигации по нашим тест-наборам. 
    • Заголовок — основная тема или идея тест-кейса. Кратное описание его сути. 
    • Предусловия — описание условий, которые не имеют прямого отношения к проверяемому функционалу, но должны быть выполнены перед выполнением тест-кейса. 
    • Шаги — описание последовательности действий, которая должна привести нас к ожидаемому результату
    • Постусловия – аналогично блоку «предусловия», в этом атрибуте указываются действия, не связанные с основной проверкой тест-кейса, но необходимые для возврата системы в исходное состояние. 
    • Ожидаемый результат — описание ожидаемого результата. Здесь описывается результат, который ожидается получить в результате успешно выполненных действий из блока «шаги».  
    • Требования к среде – описание специального оборудования, ПО и т.д.
    • История редактирования – журнал изменений в тест-кейсе.

ID, заголовок, шаги, ожидаемый результат – обязательные атрибуты тест-кейса. 
    • Перечислите виды тест кейсов.
Виды тест-кейсов:
    • Позитивные (положительные) тесты нацелены на проверку реакции системы на корректные данные. 
    • Негативные (отрицательные) тесты предназначены для проверки реакции системы на некорректные данные. 
    • Деструктивные тесты проверяют стойкость системы и ее способность обрабатывать нестандартные сценарии использования. Например, проверка невозможности получения заказов без предварительной авторизации.
    • Что такое тестовый набор (test suite)?
Тест-кейсы, проверяющие одну функциональность, могут быть объединены в тестовые наборы (test suites). 

    • Что такое баг репорт?
Баг-репорт – это технический документ, содержащий всю необходимую информацию о баге и условиях, при которых он может быть воспроизведен (последовательность шагов, приводящая к неверному поведению функциональности). Это руководство для разработчиков и команды, выполняющей исправление багов.
    • Какое нужно соблюдать правило в баг репорте для хорошего summary?
Что, где, при каких условиях?
    • Перечислите атрибуты баг репорта.
    • Уникальный идентификатор (ID);
    • Заголовок (Summary): краткое, емкое и понятное описание ошибки;
    • Окружение (Environment): ссылка на билд/коммит/версия ПО и всего окружения;
    • Шаги воспроизведения (Steps to reproduce): полный перечень шагов для воспроизведения;
    • Ожидаемый результат (Expected result): какой результат должен был быть без ошибки;
    • Фактический результат (Actual result): какой результат получился на самом деле;
    • Серьезность (Severity): Уровень влияния бага на функциональность. 
    • Приоритет (Priority): очередность исправления бага. 
    • Вложения (Attachments): логи, скриншоты, видео - всё что необходимо для понимания ошибки.
    • Опишите жизненный цикл бага.
Жизненный цикл дефекта(бага) – это цикл, через который проходит дефект за весь период своего существования, включая его различные состояния. Он начинается с момента обнаружения тестировщиком нового бага, и заканчивается, когда тестировщик закрывает баг, гарантируя, что он не будет воспроизведен снова. 
1. Новый (New): это первое состояние дефекта в его жизненном цикле. При обнаружении любого нового бага, он переходит в состояние новый, а его валидация и тестирование выполняются на более поздних стадиях жизненного цикла. 
2. Назначен (Assigned): На этом этапе заведенный впервые дефект передается команде разработчиков. Разработчика-исполнителя назначает руководитель проекта или менеджер команды тестирования.  
3. Открыт (Open): Данный статус присваивается дефекту, когда разработчик начинает процесс его анализа и работает над его исправлением, если это необходимо. 
Если по мнению разработчика дефект неактуален или некорректен, то он может был переведен в одно из следующих четырех состояний: 
    • “Дубрикат” (Duplicate): если заведенный баг уже существует или его описание совпадает с любым другим дефектом
    • “Отложенный” (Deferred): если разработчик считает, что у дефекта не очень высокий приоритет, и может быть исправлен в следующих релизах
    • “Отклонен” (Rejected): если разработчик считает дефект некорректным
    • “Не ошибка” (Not a Bug): если дефект никак не влияет на функциональность продукта. 
4. Исправлен (Fixed): Когда разработчик завершает задачу по исправлению дефекта, внося необходимые изменения в код, он изменяет статус дефекта на “Исправлен”. 
5. Ожидание повторного тестирования (Pending retest): После исправления дефекта разработчик передает его тестировщику для повторного тестирования. Пока этого не произойдет, баг остается в статусе “Pending retest”.
6. Нужен повторный тест (Retest): На этом этапе тестировщик приступает к повторному тестированию дефекта, чтобы проверить насколько точно он исправлен разработчиком в соответствии с требованиями. 
7. Открыт заново (Reopen): если в рамках дефекта какая-либо проблема не была исправлена, он снова передается разработчику, а статус дефекта меняется на “Reopen”.
8. Проверен (Verified): Если тестировщик после проведения повторного тестирования считает, что дефект был исправлен, то статус дефекта меняется на «Проверен». 
9. Закрыт (Closed): Когда дефект больше не существует и полностью исправлен, тестировщик меняет статус дефекта на “Closed”.

    • Что такое priority?
Приоритет определяет очередность выполнения задач или исправления дефектов. 

    • Перечислите классификации priority.
    • Высокий (High). Все, что влияет на типичный пользовательский путь или блокирует использование приложения, критично для проекта.
    • Средний (Medium). Все, что негативно сказывается на пользовательском опыте. Не критично, но требует обязательного решения.
    • Низкий (Low). Все остальное (опечатки, отсутствие иконок, проблемы с версткой и т.д.). Не критично и не требует срочного решения. 
    • Что такое severity?
Серьезность характеризует уровень влияния дефекта на общую функциональность и работоспособность продукта, который тестируется. 
    • Перечислите классификации severity.
    • Blocker. Ошибка, приводящая к сбою в работе приложения.
    • Critical. Критический дефект, приводящий к отказу некоторых ключевых функций.
    • Major. Важнейшая ошибка, которая указывает на отклонение от бизнес-логики или нарушает работу программы, но не оказывает существенного влияния на работу приложения.
    • Minor. Незначительный дефект, который не нарушает функциональность приложения при тестировании, но влияет на ожидаемый результат. Примером может служить ошибка проектирования.
    • Trivial. Ошибка, которая не влияет на функциональность или работу приложения, но может быть обнаружена визуально, например, опечатка в тексте.
    • Приведите пример бага низкого priority и высокого severity
Не работает редко используемая функция
    • Приведите пример бага низкого severity и высокого priority
Неверный цвет логотипа компании на главной странице

    • Что такое матрица соответствия требованиям (requirements traceability matrix)?
Матрица прослеживания требований – это документ, который отображает и отслеживает требования пользователя с помощью тестовых примеров. Он фиксирует все требования, предложенные заказчиком, и контроль за их реализацией в одном документе. 
Основная цель матрицы – подтвердить, что все требования проверяются с помощью тестовых примеров, так что ни одна функциональность не остается непроверенной во время тестирования. 

    • Что такое тест отчет? 
Это документ с данными о проведенных работах в сфере обеспечения качества, результатами тестирования, оценкой качества ПО и рекомендациями. Для наглядности в отчете обычно представлены ссылки, списки, таблицы, графики, цифры. 
Элементы отчета о тестировании:
    • Общая информация (виды проведенных тестов, проверенные модули, функциональность)
    • Тестовое окружение (название проекта, номер сборки, ссылка на сборку, версия ОС, тип СУБД, адрес стенда, тип устройства и т.п.)
    • Рекомендации QA (основная часть, 
Указана функциональность, которая заблокирована для проверки, даны пояснения, почему эти функции не проверены. 
Проведен анализ качества проверенной функциональности. Указывается, улучшилась она или ухудшилась по сравнению с предыдущей версией, указывается уровень качества на текущий момент. Если качество сборки ухудшилось, то обязательно указываются регрессионные места. 
Выделяются наиболее нестабильные части функциональности и указывается причина, по которой они таковыми являются. 
Даны рекомендации по той функциональности и дефектам, скорейшее исправление которых является наиболее приоритетным.
Составлен список наиболее критичных для сборки дефектов с указанием их названия и критичности.
    • Детализированная информация
В данной части отчета описывается более подробная информация о проверенных частях функциональности, устанавливается качество каждого проверенного модуля в отдельности. 
    • Окончание содержимого 
Данная часть содержит: ссылку на тест-план, ссылку на документ со статистикой, общее количество всех новых дефектов. 

Отчет может быть структурирован по-другому в зависимости от используемого на проекте шаблона или потребности в дополнительных блоках. 

    • По времени на сколько типов возможно разделить тест отчет?
    • (Недельный, дневной, месячный)/промежуточный
    • Конечный/финальный. 
    • Что должен показывать промежуточный отчет?
Промежуточный отчет составляется и отправляется на всех заинтересованных лиц после проведения каждого вида тестов. Данный тип отчета составляет инженер по тестированию, проверивший заданную часть функционала. 
В общем, это практически тот же финальный отчет, но с измененными приоритетами фокуса и уменьшенной глубиной временной выборки. В нем обязательно должны содержаться две главные метрики:
    • Оценка степени готовности продукта
    • Оценка проведенных работ по тестированию за время между отчетностями (прогресс).  

    • Что должен показывать итоговый отчет?
В итоговом отчете отражается информация о качестве всех проведенных видов тестов. Как правило, такой отчет составляет ведущий тестировщик либо руководитель QA-команды. Он анализирует всю информацию о состоянии ПО и собирает ее воедино. 


