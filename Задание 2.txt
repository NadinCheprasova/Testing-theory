    • Что такое проект?
Проект – это комплекс действий, направленных на получение запланированного
результата с учетом установленных сроков и ограниченных ресурсов. 

    • Из каких этапов состоит Waterfall model/ каскадная модель?
      
Каскадная модель – это классическая поэтапная методология, в которой каждый следующий шаг начинается только после завершения предыдущего. Каскадная модель не допускает изменений на этапах разработки. После завершения этапа, вернуться к нему нельзя. 

Этапы каскадной модели:
1. Сбор требований.
2. Проектирование.
3. Разработка.
4. Тестирование.
5. Эксплуатация и поддержка.

    • Какие преимущества и недостатки Waterfall model/ каскадной модели?

Преимущества каскадной модели:
    • Постоянный контроль процессов и предсказуемость
    • Хорошая структурированность
    • Фиксированные требования
    • Оценка затрат и сроков до начала проекта
    • Документация каждого этапа

Недостатки каскадной модели:
    • Проект сложно адаптировать под изменения среды
    • Проект растягивается во времени
    • Позднее выявление проблем
    • Отсутствие обратной связи от заказчика на протяжении большей части проекта
    • Высокая стоимость исправлений

    • Из каких этапов состоит V-model/ V-модель?
V-модель – это улучшенная версия каскадной модели, в которой задачи разработки идут сверху вниз по левой стороне буквы V, а задачи тестирования – вверх по правой стороне буквы V.  V-модель предполагает тщательную проверку и тестирование продукта уже на ранних стадиях разработки – оба процесса идут параллельно. При переходе на следующий этап разработки предусмотрен контроль всего, что было сделано до этого. Все найденные ошибки устраняются и только затем наступает новая фаза работы над продуктом.   
    • Сбор и анализ требований (приемочное тестирование)
    • Проектирование системы (системное тестирование)
    • Проектирование архитектуры (интеграционное тестирование)
    • Проектирование модулей (модульное тестирование)
    • Кодирование 

    • Когда использовать V-model/ V-модель?
    • Если требуется тщательное тестирование продукта, то V-модель оправдает заложенную в себя имею: validation and verification.
    • Для малых и средних проектов, где требования четко определены и фиксированы.
    • В условиях доступности инженеров необходимой квалификации, особенно тестировщика.
    • Для систем, критичных к безопасности
 
    • Из каких этапов состоит Iterative model/итеративная модель?

Суть итеративной модели – это создание базового функционала и постепенное его улучшение. 
Нет точного количества шагов, весь процесс разработки происходит в циклах. Главная цель- это создать рабочий прототип и добавлять функции в процессе работы циклов разработки. 
Итеративный метод разработки состоит из повторяющихся фаз жизненного цикла ПО:
    1. Составление плана и требований
    2. Анализ и проектирование 
    3. Реализация
    4. Тестирование
    5. Рассмотрение и оценка результата

    • Когда используется Iterative model/итеративная модель?
    1. Требования к проекту не определены полностью или изменяются в процессе разработки. 
    2. Проект имеет длительный срок выполнения, и требуется предоставлять результаты заказчику на регулярной основе. 
    3. Необходима быстрая реакция на обратную связь от заказчика, чтобы можно было изменить проект в соответствии с требованиями.
    4. Проект разбивается на несколько итераций, которые могут выполняться параллельно разными командами.
    5. Необходимо быстро начать разработку, не имея полного понимания всех требований и ограничений проекта.
    6. Разработка сложной системы, где каждая итерация позволяет уточнить требования и получить обратную связь.

    • Плюсы и минусы Iterative model/итеративной модели?
Преимущества:
    1. Повышенная эффективность
    2. Расширенные возможности для совместной работы
    3. Высокая адаптивность
    4. Высокая экономичность
    5. Возможность параллельной работы
    6. Ранее обнаружение ошибок
    7. Эффективное управление рисками
    8. Более надежная обратная связь с пользователями

Недостатки:
    1. Сложность планирования и мониторинга
    2. Потенциально неконтролируемое расширение проекта
    3. Необходимость участия заказчика
    4. Риск неправильного понимания требований
    5. Подходит не для всех проектов.

    • Agile – это?
Методология agile – это подход к управлению проектами, предполагающий разбивку проекта на этапы, а также непрерывное сотрудничество и совершенствование.  В рамках этого подхода команды следуют циклу планирования, выполнения и оценки. Agile предполагает активное взаимодействие между участниками многофункциональных команд. Agile-команда имеет общую цель и достигает ее наиболее эффективным, по ее мнению, способом. 

    • Agile манифест  (Agile Manifesto) – это?
      
Agile манифест  (Agile Manifesto) – это манифест гибкой разработки ПО – основной документ, содержащий описание ценностей и принципов гибкой разработки ПО. 
Он включает в себя 4 ценности и 12 принципов.

    • Каковы ценности аgile манифеста?
1. Люди и взаимодействие важнее процессов и инструментов.
2. Работающий продукт важнее исчерпывающей документации.
3. Сотрудничество с заказчиком важнее согласования условий контракта.
4. Готовность к изменениям важнее следования первоначальному плану.

    • Основные принципы аgile манифеста?
    1. Удовлетворение клиентов – приоритетная задача при разработке продукта. Клиенты должны своевременно и в полном объеме получать качественное ПО и его обновления. 
    2. Изменения в процессе разработки приветствуются. Гибкие процессы позволяют наделить продукт конкурентными преимуществами для клиентов.
    3. Работающий продукт следует выпускать как можно чаще, с периодичностью от пары недель до пары месяцев. 
    4. Руководители и разработчики должны трудиться вместе на протяжении всего рабочего процесса. 
    5. В основе проекта - мотивированные люди. Обеспечьте им необходимые условия работы, поддержку и доверие.
    6. Лучший способ передачи информации в команде – личная беседа.
    7. Работающий продукт – основной показатель прогресса, а не часы, трудозатраты и другие критерии.
    8. Гибкие процессы – основа устойчивого развития. Они позволяют поддерживать нужный рабочий темп. 
    9. Важно уделять внимание техническому совершенству и качественному дизайну продукта. 
    10. Важно сокращать до минимума лишнюю работу и не переусложнять проект и рабочие процессы.  
    11. Самые лучшие продукты рождаются у самоорганизующихся команд. 
    12. Команда должна регулярно оценивать работу и принимать меры для улучшения эффективности. 
       
    • Scrum – это? (опишите подробно)
Scrum – это фреймворк, способ организации работы, основанный на итерационно-инкрементальной модели разработки. Это фреймворк с жесткими правилами и границами. Разработка делится на циклы (итерации или спринты), итогом каждого цикла является рабочая версия продукта. У каждой задачи есть приоритет.  
Структура scrum включат: 3 роли в команде, 3 артефакта и 5 процессов. 

3 роли в скраме:
    1. Владелец продукта (product owner) – отвечает за определение приоритетов работы, подлежащей выполнению, и сроках ее готовности. Он ставит задачи команде и ведет переговоры. 
    2. Скрам-мастер (scrum master) – отвечает за то, чтобы команда придерживалась принципов гибкой разработки ПО, он обучает команду и помогает команде организовывать работу. 
    3. Скрам-команда (scrum-team) – создает продукт. В нее входят специалисты, необходимые для разработки определенного продукта.
        
3 артефакта в скрам:
    1. Бэклог продукта (product backlog) – это список задач и функций, которые необходимо решить/ реализовать в конкретном продукте.  Бэклог продукта состоит из пользовательских историй (user story)  - это короткое и максимального понятное описание функционала продукта и его особенностей, которые получит пользователь как итоговую ценность. 
    2. Бэклог спринта (sprint backlog) – это список задач, которые команда должна выполнить за один спринт.
    3. Инкремент продукта (product increment) – это готовые к поставке клиенту результаты работы над заданиями из бэклога продукта, полученные за спринт. Он также содержит инкременты всех предыдущих спринтов (прирост функциональности).  
       
5 церемоний в скрам:
    1. Планирование спринта (sprint planning) – это встреча инициирующая спринт и планирующая работу на этот спринт. Участники: скрам-команда, владелец продукта, скрам-мастер.
    2. Спринт (sprint) -  Спринт может быть от 1 до 4 недель.
    3. Ежедневные стэнд-апы (daily scrum) – 15 мин обсуждения (что делал вчера, что буду делать сегодня, какие есть проблемы в работе, что делаю для их устранения)
    4. Обзор спринт (sprint review) – от 30 мин до 2х часов. На нем команда рассказывает, что было сделано, и демонстрирует те части проекта, которые окончательно готовы. Участники: команда, стейкхолдеры, заказчики, владелец продукта, скрам-мастер. 
    5. Ретроспектива спринта (sprint retrospective) - это мероприятие, которое завершает спринт.

    • Что такое Velocity/Capacity?

Velocity – производительность скрам-команды (скорость). Это величина, отражающая количество работы, которое скрам-команда может выполнить за один спринт.  Производительность вычисляется в конце спринта как сумма Стори пойнтов (story points) по всем полностью завершенным элементам Бэклога спринта (Sprint backlog). Story point – это условная величина, позволяющая давать элементам бэклога относительные веса. Чаще всего для оценки в стори пойнтах используются числа Фибоначчи, что позволяет провести оценку достаточно быстро. Стори пойнты (SP) по частично завершенным или не завершенным историям не должны участвовать в расчете производительности команды. 
Прогноз производительности должен отслеживаться в течение спринта на основании Диаграммы сгорания работ спринта (Sprint Burndown Chart). Sprint Burndown Chart визуально показывает прогресс команды в стори пойтах по дням спринта. Это графическое представление того, сколько работы уже сделано и сколько еще остается сделать. 
Velocity – это измерение среднего количества SP, выполненных за определенный период времени. Прогнозирование и планирование, основанное на метрике Velocity, отображает вашу оценку прошлых результатов, т.е. базируется на этих прошлых результатах. 

Capacity – это тоже оценка будущих показателей, но основывается она не на прошлых результатах, а на оценке общего количества времени, которое есть в каком-то конкретном спринте. Таким образом, прогнозирование с помощью показателя продуктивности, означает планирование, основанное на времени, которое каждый член команды может потратить на работу в предстоящем спринте.  Capacity – это сумма общего количества рабочих часов всех участников команды, потраченных на выполнение задач спринта. 


    • Преимущества и недостатки Scrum?
Преимущества scrum:
    1. Довольные и мотивированные сотрудники, неформальное общение, возможность высказываться и предлагать.
    2. Отсутствие ненужной бюрократии и документации. 
    3. Заказчик получит продукт, который будет востребован. Потому, что постоянно есть обратная связь и та самая гибкость в работе. 
    4. Скрам можно использовать даже в небольших стартапах. 
       
Недостатки scrum: 
    1. Сложно собрать команду профессионалов, да еще так, чтобы им было комфортно работать и общаться друг с другом. 
    2. Людей нужно обучить работе со скрам, а это время и деньги. 
    3. Сложно избежать ошибок в планировании. Особенно на старте. Времени на задачи закладывается то слишком много, то слишком мало. 
    4. Жесткое следование церемониям. Проект разбивается на части, которые делают в несколько спринтов, со всеми митингами, ревью и ретроспективами
    • Что такое ретроспектива?
Ретроспектива – это мероприятие (или «церемония»), направленное на улучшение командных процессов за счет обсуждения предыдущих событий и процессов в команде, которые наблюдались в течение спринта. Это мероприятие, которое завершает спринт (в последний день спринта). Может длиться от 60 мин до 2 часов. Участники: команда проекта, скрам-мастер, тимлид и владелец продукта. Ее целью является повышение эффективности процессов внутри команды за счет обсуждения результатов работы команды и происходящих в ней процессов. В результате ретроспективы команда может принять новые решения о том, как можно работать лучше и делать больше результата. 

    • Kanban – это? (опишите подробно)
Kanban – это система постановки задач и организации рабочих процессов для эффективного достижения поставленных целей. Канбан помогает отслеживать процесс выполнения поставленных задач и распределять нагрузку между сотрудниками. Визуализация всех этапов позволяет каждому сотруднику быть в курсе продвижения процессов. Для упрощения контроля рабочий процесс визуализируют на доске, поделенной на колонки. Каждая колонка – это текущее состояние работ. 

9 ценностей Канбана: прозрачность, баланс, сотрудничество, клиентоориентированность, поток, лидерство, понимание, согласие, уважение. 

Основные принципы методологии канбан:
    1. Визуализация процессов. Важно, чтобы все поставленные задачи были добавлены в план.
    2. Группировка задач. Самый простой способ – разделить задачи на три колонки: «Надо выполнить», «Выполняется», «Выполнена». 
    3. Внимание к незавершенным задачам. Если задачи подвисают на каком-то этапе, следует разобраться в причинах, распределить ресурсы в случае необходимости или оказать нужную поддержку, чтобы завершить работу. 
    4. Постоянное совершенствование. Контроль за соблюдением сроков выполнения задач и их перемещением с одного уровня на другой в системе канбан позволяет видеть слабые места в процессах. 
    • Преимущества и недостатки Kanban?
Преимущества канбан:
    1. Гибкость планирования
    2. Контроль сроков выполнения
    3. Повышение эффективности работы
    4. Наглядность и продвижение работы

Минусы канбан:
    1. Не подходит для долгосрочного планирования
    2. Не подходит для больших команд 

    • Что такое SDLC? Из каких этапов состоит? Что происходит на каждом этапе?
SDLC – Software Development Life Cycle (Жизненный цикл разработки ПО) – это процесс, направленный на создание и поддержание работоспособности, качества и надежности ПО.

1. Анализ требований (requirements analysis)
    • Формирование целей и задач проекта
    • Определение сроков и стоимости разработки ПО
    • Анализ и формирование требований заказчика
    • Создание и подписание технического задания на разработку ПО
2. Проектирование (design)
    • Выбор технологии и языка программирования
    • Определение требований к пользовательскому интерфейсу
    • Выбор подходящей СУБД
    • Определение требований к аппаратному обеспечению
    • Выбор архитектуры системы

3. Разработка и реализация (development)
    • Разработка с помощью различных технологий и языка программирования
    • Создание прототипа рабочей версии продукта

4.  Тестирование (testing) 
    • Проверка продукта на соответствие требованиям и нуждам заказчика
    • Поиск и регистрация дефектов и т.д.

5. Развертывание (deployment)
    • Установка системы
    • Эксплуатация

6. Поддержка (maintenance)
    • Поддержка пользователей 
    • Исправление дефектов (по гарантии)
    • Реализация нового функционала и т.п.

    • Что такое STLC? Из каких этапов состоит? Что происходит на каждом этапе?
STLC – Software Testing Life Cycle (Жизненный цикл процесса тестирования) 

1. Анализ требований (requirements analysis)
    • Подготовка вопросов для BA/SA/Менеджера
    • Определение целей тестирования и приоритетов
    • Анализ и начало подготовки тестовой среды

2. Тестовое планирование (test planning)

    • Подготовка тест-плана
    • Выработка тестовой стратегии
    • Оценка времени и ресурсов для тестирования

3. Написание тест-кейсов (test case preparation)

    • Написание тест-кейсов
    • Написание автотестов
    • Подготовка тестовых данных

4. Подготовка тестовой среды (test environment setup)

    • Настройка тестовой среды
    • Настройка всех инструментальных средств для тестирования 

5. Выполнение тестов (test execution) 

    • Тестирование ПО
    • Нахождение дефектов
    • Перепроверка после исправления 

6. Завершающая (test closure)

    • Написание сводного отчета о тестировании
    • Формирование метрик
    • Подведение итогов о проделанном процессе 




